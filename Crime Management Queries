CREATE DATABASE CRIMEMANAGEMENT;
USE CRIMEMANAGEMENT;

-- Creating the Database Tables 

CREATE TABLE Crime (
    CrimeID INT PRIMARY KEY,
    IncidentType VARCHAR(255),
    IncidentDate DATE,
    Location VARCHAR(255),
    Description TEXT,
    Status VARCHAR(20)
);

CREATE TABLE Victim (
    VictimID INT PRIMARY KEY,
    CrimeID INT,
    Name VARCHAR(255),
    ContactInfo VARCHAR(255),
    Injuries VARCHAR(255),
    FOREIGN KEY (CrimeID) REFERENCES Crime(CrimeID)
);

CREATE TABLE Suspect (
    SuspectID INT PRIMARY KEY,
    CrimeID INT,
    Name VARCHAR(255),
    Description TEXT,
    CriminalHistory TEXT,
    FOREIGN KEY (CrimeID) REFERENCES Crime(CrimeID)
);

-- Inserting Sample Data 

INSERT INTO Crime (CrimeID, IncidentType, IncidentDate, Location, Description, Status)
VALUES
    (1, 'Robbery', '2023-09-15', '123 Main St, Cityville', 'Armed robbery at a convenience store', 'Open'),
    (2, 'Homicide', '2023-09-20', '456 Elm St, Townsville', 'Investigation into a murder case', 'Under Investigation'),
    (3, 'Theft', '2023-09-10', '789 Oak St, Villagetown', 'Shoplifting incident at a mall', 'Closed');

INSERT INTO Victim (VictimID, CrimeID, Name, ContactInfo, Injuries)
VALUES
    (1, 1, 'John Doe', 'johndoe@example.com', 'Minor injuries'),
    (2, 2, 'Jane Smith', 'janesmith@example.com', 'Deceased'),
    (3, 3, 'Alice Johnson', 'alicejohnson@example.com', 'None');

INSERT INTO Suspect (SuspectID, CrimeID, Name, Description, CriminalHistory)
VALUES
    (1, 1, 'Robber 1', 'Armed and masked robber', 'Previous robbery convictions'),
    (2, 2, 'Unknown', 'Investigation ongoing', NULL),
    (3, 3, 'Suspect 1', 'Shoplifting suspect', 'Prior shoplifting arrests');

-- Creating the 'Individuals' Table for Age-Based Queries 

CREATE TABLE Individuals (
    PersonID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) UNIQUE,
    Age INT
);

-- Inserting Data into 'Individuals' Table 

INSERT INTO Individuals (Name, Age)
VALUES
    ('John Doe', 35),
    ('Jane Smith', 29),
    ('Alice Johnson', 40),
    ('Robber 1', 45),
    ('Unknown', 38),
    ('Suspect 1', 30);

-- Queries 

-- 1. Select all open incidents.  
SELECT * FROM Crime WHERE Status = 'Open';

-- 2. Find the total number of incidents.  
SELECT COUNT(*) AS TotalIncidents FROM Crime;

-- 3. List all unique incident types.  
SELECT DISTINCT IncidentType FROM Crime;

-- 4. Retrieve incidents that occurred between '2023-09-01' and '2023-09-10'.  
SELECT * FROM Crime WHERE IncidentDate BETWEEN '2023-09-01' AND '2023-09-10';

-- 5. List persons involved in incidents in descending order of age.  
SELECT i.Name, i.Age, c.IncidentType  
FROM Individuals i  
LEFT JOIN Victim v ON i.Name = v.Name  
LEFT JOIN Suspect s ON i.Name = s.Name  
LEFT JOIN Crime c ON v.CrimeID = c.CrimeID OR s.CrimeID = c.CrimeID  
ORDER BY i.Age DESC;

-- 6. Find the average age of persons involved in incidents.  
SELECT AVG(Age) AS AverageAge FROM Individuals;

-- 7. List incident types and their counts, only for open cases.  
SELECT IncidentType, COUNT(*) AS Count  
FROM Crime  
WHERE Status = 'Open'  
GROUP BY IncidentType;

-- 8. Find persons with names containing 'Doe'.  
SELECT * FROM Victim WHERE Name LIKE '%Doe%';

-- 9. Retrieve the names of persons involved in open cases and closed cases.  
SELECT Name FROM Victim  
JOIN Crime ON Victim.CrimeID = Crime.CrimeID  
WHERE Crime.Status IN ('Open', 'Closed')  
UNION  
SELECT Name FROM Suspect  
JOIN Crime ON Suspect.CrimeID = Crime.CrimeID  
WHERE Crime.Status IN ('Open', 'Closed');

-- 10. List incident types where there are persons aged 30 or 35 involved.  
SELECT DISTINCT c.IncidentType  
FROM Crime c  
JOIN Victim v ON c.CrimeID = v.CrimeID  
JOIN Individuals i ON v.Name = i.Name  
WHERE i.Age IN (30, 35)  
UNION  
SELECT DISTINCT c.IncidentType  
FROM Crime c  
JOIN Suspect s ON c.CrimeID = s.CrimeID  
JOIN Individuals i ON s.Name = i.Name  
WHERE i.Age IN (30, 35);

-- 11. Find persons involved in incidents of the same type as 'Robbery'.  
SELECT Name FROM Victim  
JOIN Crime ON Victim.CrimeID = Crime.CrimeID  
WHERE Crime.IncidentType = 'Robbery'  
UNION  
SELECT Name FROM Suspect  
JOIN Crime ON Suspect.CrimeID = Crime.CrimeID  
WHERE Crime.IncidentType = 'Robbery';

-- 12. List incident types with more than one open case.  
SELECT IncidentType, COUNT(*) AS Count  
FROM Crime  
WHERE Status = 'Open'  
GROUP BY IncidentType  
HAVING COUNT(*) > 1;

-- 13. List all incidents with suspects whose names also appear as victims in other incidents.  
SELECT DISTINCT C.*  
FROM Crime C  
JOIN Victim V ON C.CrimeID = V.CrimeID  
JOIN Suspect S ON C.CrimeID = S.CrimeID  
WHERE V.Name = S.Name;

-- 14. Retrieve all incidents along with victim and suspect details.  
SELECT C.*, V.Name AS VictimName, S.Name AS SuspectName  
FROM Crime C  
LEFT JOIN Victim V ON C.CrimeID = V.CrimeID  
LEFT JOIN Suspect S ON C.CrimeID = S.CrimeID;

-- 15. Find incidents where the suspect is older than any victim.  
SELECT DISTINCT c.CrimeID, c.IncidentType  
FROM Crime c  
JOIN Suspect s ON c.CrimeID = s.CrimeID  
JOIN Individuals si ON s.Name = si.Name  
WHERE si.Age > (  
    SELECT MAX(vi.Age)  
    FROM Victim v  
    JOIN Individuals vi ON v.Name = vi.Name  
    WHERE v.CrimeID = c.CrimeID  
);

-- 16. Find suspects involved in multiple incidents.  
SELECT Name, COUNT(*) AS IncidentCount  
FROM Suspect  
GROUP BY Name  
HAVING COUNT(*) > 1;

-- 17. List incidents with no suspects involved.  
SELECT C.*  
FROM Crime C  
LEFT JOIN Suspect S ON C.CrimeID = S.CrimeID  
WHERE S.SuspectID IS NULL;

-- 18. List all cases where at least one incident is of type 'Homicide' and all other incidents are of type 'Robbery'.  
SELECT *  
FROM Crime  
WHERE IncidentType = 'Homicide'  
AND NOT EXISTS (  
    SELECT 1 FROM Crime WHERE IncidentType != 'Robbery'  
);

-- 19. Retrieve a list of all incidents and the associated suspects, showing suspects for each incident, or 'No Suspect' if there are none.  
SELECT C.CrimeID, C.IncidentType, COALESCE(S.Name, 'No Suspect') AS SuspectName  
FROM Crime C  
LEFT JOIN Suspect S ON C.CrimeID = S.CrimeID;

-- 20. List all suspects who have been involved in incidents with incident types 'Robbery' or 'Assault'.  
SELECT DISTINCT S.*  
FROM Suspect S  
JOIN Crime C ON S.CrimeID = C.CrimeID  
WHERE C.IncidentType IN ('Robbery', 'Assault');
